# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - develop
  # pull_request:
  #   branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DOCKER_IMAGE: ranskills/pipeline-test
  ARTIFACTS_NAME: build-artifacts
  ARTIFACTS_PATH: artifacts
  ISSUE_ASSIGNEES: ranskills

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  transpile:
    name: Transpile
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install yarn package manager
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn

      - name: Transpile Typescript to JavaScript
        run: yarn compile

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: transpile

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install yarn package manager
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn

      - name: Build binary
        run: |
          yarn compile && yarn build
          ls -lash

      - name: Test
        run: yarn test:unit

      # - name: Pass test 1
      #   run: exit 0

      # - name: Pass test 1
      #   run: exit 1

      # - name: Pass test 1
      #   run: exit 0

      - uses: ranskills/pipeline-test/.github/actions/issue-creator@develop
        if: ${{ failure() }}
        with:
          assignees: ${{ env.ISSUE_ASSIGNEES }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create Issue on Failing Test
      #   if: ${{ failure() }}
      #   run: |
      #     curl --request POST \
      #     --url https://api.github.com/repos/${{ github.repository }}/issues \
      #     --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
      #     --header 'content-type: application/json' \
      #     --data '{
      #       "title": "Issue created due to workflow failure: ${{ github.run_id }}",
      #       "body": "Automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n due to failure in _${{ github.run_id }}_.",
      #       "assignees": [ "ranskills" ]
      #     }'

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACTS_NAME }}
          path: |
            pipeline-test
            Dockerfile
          retention-days: 1

  test:
    name: E2E Test
    runs-on: ubuntu-latest
    needs: build
    outputs:
      DOCKER_IMAGE_TAG: ${{ steps.set-docker-image-tag.outputs.DOCKER_IMAGE_TAG}}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install yarn package manager
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACTS_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}

      - name: Start server
        run: |
          cd ${{ env.ARTIFACTS_PATH }}
          pwd
          ls -lash
          chmod +x pipeline-test
          ./pipeline-test &

      - name: End-to-End (E2E) Tests
        run: |
          echo Running unit tests
          yarn test:e2e
          # exit 1 # Fail test

      - name: Set Docker Image Tag
        id: set-docker-image-tag
        run: |
          branch=`git branch --show-current`
          tag=$(echo $branch | tr / _)
          echo "DOCKER_IMAGE_TAG=$tag" >> $GITHUB_ENV
          echo "::set-output name=DOCKER_IMAGE_TAG::$tag"

  release:
    name: Release
    needs: test
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_TAG: ${{ needs.test.outputs.DOCKER_IMAGE_TAG }}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACTS_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}

      - name: Build Docker Image
        run: |
          cd ${{ env.ARTIFACTS_PATH }}
          docker build --tag ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }} \
          --label git-sha=`git rev-parse HEAD` \
          --label git-branch=${GITHUB_REF##*/} \
          --label git-message="$(echo ${commitmsg} | sed 's/"//g')" \
          --label git-timestamp='${{ github.event.head_commit.timestamp }}' \
          --label git-author-name='${{ github.event.head_commit.author.name }}' \
          --label git-author-email='${{ github.event.head_commit.author.email }}' \
          --label git-committer-name='${{ github.event.head_commit.committer.name }}' \
          --label git-committer-email='${{ github.event.head_commit.committer.email }}' \
          --label build-hostname=`hostname` \
          --label build-dir=`pwd` \
          --label build-origin=github-actions \
          .

      - name: Publish Docker Image
        if: ${{ success() }}
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME}} --password-stdin
          docker push ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }}