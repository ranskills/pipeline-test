# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DOCKER_IMAGE: ranskills/pipeline-test

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Runs a single command using the runners shell
      - name: Install yarn package manager
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn

      - name: Build binary
        run: |
          yarn compile && yarn build
          ls -lash

      - name: Test
        run: yarn test:unit

      - name: Create Issue on Failing Test
        if: ${{ failure() }}
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "title": "Issue created due to workflow failure: ${{ github.run_id }}",
            "body": "Automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n due to failure in _${{ github.run_id }}_.",
            "assignees": [ "ranskills" ]
          }'

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: |
            pipeline-test
            Dockerfile
          retention-days: 5

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Unit Tests
        run: |
          echo Running unit tests
          # exit 1 # Fail test

      - name: Set Docker Image Tag
        run: |
          branch=`git branch --show-current`
          tag=$(echo $branch | tr / _)
          echo "DOCKER_IMAGE_TAG=$tag" >> $GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: some-path

      - name: Directory Listings
        run: |
          ls -lah
          ls -lah some-path

  release:
    name: Release
    needs: test
    runs-on: ubuntu-latest
    steps:
      # - uses: actions/checkout@v2
      # - uses: actions/setup-node@v2
      #   with:
      #     node-version: '14'
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: some-path

      - name: Directory Listings
        run: |
          ls -lah
          ls -lah some-path

      - name: Build Docker Image
        if: ${{ success() }}
        run: docker build --tag ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }} .

      - name: Publish Docker Image
        if: ${{ success() }}
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME}} --password-stdin
          docker push ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }}